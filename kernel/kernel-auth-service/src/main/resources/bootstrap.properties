#spring.cloud.config.uri=http://104.211.212.28:51000
#spring.cloud.config.label=0.12.0
#spring.profiles.active=local
spring.cloud.config.name=kernel
spring.application.name=kernel-auth-service
#management.security.enabled=false
#management.endpoint.health.show-details=when-authorized
#management.endpoints.web.exposure.include=*
management.endpoint.health.show-details=always
management.endpoints.web.exposure.include=info,health,refresh,mappings
#
server.port=8091
server.servlet.path=/v1/authmanager

server.ssl.enabled=true
server.ssl.client-auth=want
server.ssl.enabled-protocols=TLSv1.2
server.ssl.protocol=TLS
server.ssl.key-store-type=JKS
server.ssl.key-store=./KeyStore.jks
server.ssl.key-store-password=ChangeIt
server.ssl.key-password=ChangeIt
server.ssl.key-alias=mosip
server.ssl.trust-store-type=JKS
server.ssl.trust-store=./TrustStore.jks
server.ssl.trust-store-password=ChangeIt


#
##disabling health check so that client doesnt try to load properties from sprint config server every
## 5 minutes (should not be done in production)
#health.config.enabled=false

#spring.datasource.platform=all
#spring.datasource.driverClassName=org.h2.Driver
#spring.datasource.url=jdbc:h2\:mem\:testdb;DB_CLOSE_DELAY=-1;INIT=CREATE SCHEMA IF NOT EXISTS iam
#spring.datasource.username=postgres
#spring.datasource.password=root
#spring.jpa.show-sql=true
#spring.jpa.generate-ddl=true
#spring.jpa.hibernate.ddl-auto=create-drop
#spring.jpa.database=POSTGRESQL
#spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.PostgreSQLDialect
#spring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation=true


#spring.datasource.hikari.connectionTimeout=30000
#spring.datasource.hikari.idleTimeout=200000
#spring.datasource.hikari.minimumIdle=0


